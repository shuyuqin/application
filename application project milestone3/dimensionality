import numpy as np
from sklearn.decomposition import PCA
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.gaussian_process import GaussianProcessClassifier
from sklearn.gaussian_process.kernels import RBF
from sklearn.gaussian_process.kernels import Matern
import random

def cross_validation(testX, trainX, testY, trainY):
    kernel = 1.0 * RBF([1.0, 1.0])
    gpc_rbf_anisotropic = GaussianProcessClassifier(kernel=kernel).fit(trainX, trainY)
    predicted_result = gpc_rbf_anisotropic.predict(testX)
    return 1.0*(1.0*sum(np.array(predicted_result) != np.array(testY)) / len(testY))

def cross_validation_t(testX, trainX, testY, trainY):
    kernel = 1.0 * RBF([10,10])
    gpc_rbf_anisotropic = GaussianProcessClassifier(kernel=kernel).fit(trainX, trainY)
    predicted_result = gpc_rbf_anisotropic.predict(testX)
    return 1.0*(1.0*sum(np.array(predicted_result) != np.array(testY)) / len(testY))

def cross_validation_tt(testX, trainX, testY, trainY):
    kernel = 1.0 * Matern(length_scale=1.0,length_scale_bounds=(1e-1,10.0),nu=1.5)
    gpc_rbf_anisotropic = GaussianProcessClassifier(kernel=kernel).fit(trainX, trainY)
    predicted_result = gpc_rbf_anisotropic.predict(testX)
    return 1.0*(1.0*sum(np.array(predicted_result) != np.array(testY)) / len(testY))


csv_data=pd.read_csv("titanic.csv")
X=(csv_data.drop(["PassengerId",'Survived'],axis=1).as_matrix())
y=np.array(csv_data["Survived"])

pca = PCA(n_components=2)
pca.fit(X)
#print(pca.transform(X))
X_new=pca.transform(X)
X1=X_new[:,0]
X2=X_new[:,1]
plt.scatter(X1,X2)
plt.show()
fold_num = 10

rand_list = list(range(len(y)))
random.shuffle(rand_list)

data_groups = [rand_list[i:i + int(len(rand_list) / fold_num)] for i in range(0, len(rand_list), int(len(rand_list) / fold_num))]
cross_validation_error = 0
cross_validation_error_t = 0
cross_validation_error_tt = 0
for n in range(fold_num):
    testX = (X_new[data_groups[n], :])
    trainX = np.delete(X_new, data_groups[n], axis=0)
    testY = y[data_groups[n]]
    trainY = np.delete(y, data_groups[n])
    cross_validation_error += cross_validation(testX, trainX, testY, trainY)
    cross_validation_error_t += cross_validation_t(testX, trainX, testY, trainY)
    cross_validation_error_tt += cross_validation_tt(testX, trainX, testY, trainY)
    # print cross_validation_error
    # print cross_validation_error_t
    # print cross_validation_error_tt
    # print []
cross_validation_error = cross_validation_error / fold_num
cross_validation_error_t = cross_validation_error_t / fold_num
cross_validation_error_tt = cross_validation_error_tt / fold_num
print 1.0-cross_validation_error
print 1.0-cross_validation_error_t
print 1.0-cross_validation_error_tt